Index: samples/shell.cc
===================================================================
--- samples/shell.cc	(revision 8209)
+++ samples/shell.cc	(working copy)
@@ -43,10 +43,12 @@
 v8::Handle<v8::Value> Quit(const v8::Arguments& args);
 v8::Handle<v8::Value> Version(const v8::Arguments& args);
 v8::Handle<v8::String> ReadFile(const char* name);
+v8::Handle<v8::Value> ReadLine(const v8::Arguments& args);
 void ReportException(v8::TryCatch* handler);
 
 
 int RunMain(int argc, char* argv[]) {
+
   v8::V8::SetFlagsFromCommandLine(&argc, argv, true);
   v8::HandleScope handle_scope;
   // Create a template for the global object.
@@ -61,11 +63,30 @@
   global->Set(v8::String::New("quit"), v8::FunctionTemplate::New(Quit));
   // Bind the 'version' function
   global->Set(v8::String::New("version"), v8::FunctionTemplate::New(Version));
+  // Bind the 'readline' function
+  global->Set(v8::String::New("readline"), v8::FunctionTemplate::New(ReadLine)); 
+
+  //char* lastArg = argv[argc-1];
+  //global->Set(v8::String::New("lastArg"), v8::String::New(lastArg)); 
+
   // Create a new execution environment containing the built-in
   // functions
   v8::Handle<v8::Context> context = v8::Context::New(NULL, global);
   // Enter the newly created execution environment.
   v8::Context::Scope context_scope(context);
+
+  //v8::Handle<v8::Array> argumentsArray = v8::Array::New();
+  //global->Set(v8::String::New("args"),argumentsArray); 
+
+	v8::Handle<v8::Object> g = context->Global();
+	v8::Handle<v8::Array> argumentsArray = v8::Array::New();
+	g->Set(v8::String::New("arguments"), argumentsArray);
+	g->Set(v8::String::New("foo"), v8::String::New("bar"));
+
+	int argumentsArrayIndex = 0;
+  bool foundScriptToRun = false;
+	char scriptToRun[40];
+
   bool run_shell = (argc == 1);
   for (int i = 1; i < argc; i++) {
     const char* str = argv[i];
@@ -86,23 +107,60 @@
         return 1;
       i++;
     } else {
-      // Use all other arguments as names of files to load and run.
-      v8::HandleScope handle_scope;
-      v8::Handle<v8::String> file_name = v8::String::New(str);
-      v8::Handle<v8::String> source = ReadFile(str);
-      if (source.IsEmpty()) {
-        printf("Error reading '%s'\n", str);
-        return 1;
-      }
-      if (!ExecuteString(source, file_name, false, true))
-        return 1;
+      if(foundScriptToRun){
+				argumentsArray->Set(v8::Integer::New(argumentsArrayIndex), v8::String::New(argv[i]));
+				argumentsArrayIndex++;
+				//printf("setting %s at index %d\n",argv[i],argumentsArrayIndex);
+			}else{
+				foundScriptToRun = true;
+				strcpy(scriptToRun,str);
+			}
     }
   }
+
+	// Use all other arguments as names of files to load and run.
+	if(foundScriptToRun){ 
+		v8::HandleScope handle_scope;
+		v8::Handle<v8::String> file_name = v8::String::New(scriptToRun);
+		v8::Handle<v8::String> source = ReadFile(scriptToRun);
+		if (source.IsEmpty()) {
+			printf("Error reading '%s'\n", scriptToRun);
+			return 1;
+		}
+
+		if (!ExecuteString(source, file_name, false, true))
+			return 1;
+	}
+
   if (run_shell) RunShell(context);
   return 0;
 }
 
+// This function returns a new array with three elements, x, y, and z.
+v8::Handle<v8::Array> NewPointArray(int, int, int);
 
+v8::Handle<v8::Array> NewPointArray(int x, int y, int z) {
+
+  // We will be creating temporary handles so we use a handle scope.
+  v8::HandleScope handle_scope;
+
+  // Create a new empty array.
+  v8::Handle<v8::Array> array = v8::Array::New(3);
+
+  // Return an empty result if there was an error creating the array.
+  if (array.IsEmpty())
+    return v8::Handle<v8::Array>();
+
+  // Fill out the values
+  //array->Set(0, v8::Integer::New(x));
+  //array->Set(1, v8::Integer::New(y));
+  //array->Set(2, v8::Integer::New(z));
+
+  // Return the value through Close.
+  return handle_scope.Close(array);
+}
+
+
 int main(int argc, char* argv[]) {
   int result = RunMain(argc, argv);
   v8::V8::Dispose();
@@ -195,6 +253,26 @@
 }
 
 
+// Reads a line from stdin
+v8::Handle<v8::Value> ReadLine(const v8::Arguments& args) {
+
+	char str [10000];
+	char c;
+	int i;
+
+	i=0;
+	while(c = getchar()){
+		if ( c == '\n' || c == EOF ) break;
+
+		str[i] = c;
+		i++;	
+	}
+	str[i] = '\0';
+
+	return v8::String::New(str, i);
+}
+
+
 // Reads a file into a v8 string.
 v8::Handle<v8::String> ReadFile(const char* name) {
   FILE* file = fopen(name, "rb");
Index: SConstruct
===================================================================
--- SConstruct	(revision 8209)
+++ SConstruct	(working copy)
@@ -47,7 +47,7 @@
 # on linux we need these compiler flags to avoid crashes in the v8 test suite
 # and avoid dtoa.c strict aliasing issues
 if os.environ.get('GCC_VERSION') == '44':
-    GCC_EXTRA_CCFLAGS = ['-fno-tree-vrp']
+    GCC_EXTRA_CCFLAGS = ['-fno-tree-vrp', '-fno-strict-aliasing']
     GCC_DTOA_EXTRA_CCFLAGS = ['-fno-strict-aliasing']
 else:
     GCC_EXTRA_CCFLAGS = []
